// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/mocks/auth.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/mocks/auth.go -destination=./internal/usecase/mocks/auth_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/khostya/backend-bootcamp-assignment-2024/internal/domain"
	dto "github.com/khostya/backend-bootcamp-assignment-2024/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// DummyLogin mocks base method.
func (m *MockauthService) DummyLogin(arg0 context.Context, userType domain.UserType) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", arg0, userType)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockauthServiceMockRecorder) DummyLogin(arg0, userType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockauthService)(nil).DummyLogin), arg0, userType)
}

// Login mocks base method.
func (m *MockauthService) Login(ctx context.Context, param dto.LoginUserParam) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, param)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockauthServiceMockRecorder) Login(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockauthService)(nil).Login), ctx, param)
}

// Register mocks base method.
func (m *MockauthService) Register(ctx context.Context, param dto.RegisterUserParam) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, param)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockauthServiceMockRecorder) Register(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockauthService)(nil).Register), ctx, param)
}
