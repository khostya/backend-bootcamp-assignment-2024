// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/mocks/sender.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/mocks/sender.go -destination=./internal/usecase/mocks/sender_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/khostya/backend-bootcamp-assignment-2024/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MocksenderService is a mock of senderService interface.
type MocksenderService struct {
	ctrl     *gomock.Controller
	recorder *MocksenderServiceMockRecorder
}

// MocksenderServiceMockRecorder is the mock recorder for MocksenderService.
type MocksenderServiceMockRecorder struct {
	mock *MocksenderService
}

// NewMocksenderService creates a new mock instance.
func NewMocksenderService(ctrl *gomock.Controller) *MocksenderService {
	mock := &MocksenderService{ctrl: ctrl}
	mock.recorder = &MocksenderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksenderService) EXPECT() *MocksenderServiceMockRecorder {
	return m.recorder
}

// AsyncSendEmails mocks base method.
func (m *MocksenderService) AsyncSendEmails(ctx context.Context, subscriptions []domain.Subscription) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncSendEmails", ctx, subscriptions)
}

// AsyncSendEmails indicates an expected call of AsyncSendEmails.
func (mr *MocksenderServiceMockRecorder) AsyncSendEmails(ctx, subscriptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncSendEmails", reflect.TypeOf((*MocksenderService)(nil).AsyncSendEmails), ctx, subscriptions)
}

// SendEmail mocks base method.
func (m *MocksenderService) SendEmail(ctx context.Context, recipient, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, recipient, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MocksenderServiceMockRecorder) SendEmail(ctx, recipient, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MocksenderService)(nil).SendEmail), ctx, recipient, message)
}
