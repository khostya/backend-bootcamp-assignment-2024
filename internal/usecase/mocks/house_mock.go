// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/mocks/house.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/mocks/house.go -destination=./internal/usecase/mocks/house_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "backend-bootcamp-assignment-2024/internal/domain"
	dto "backend-bootcamp-assignment-2024/internal/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockhouseService is a mock of houseService interface.
type MockhouseService struct {
	ctrl     *gomock.Controller
	recorder *MockhouseServiceMockRecorder
}

// MockhouseServiceMockRecorder is the mock recorder for MockhouseService.
type MockhouseServiceMockRecorder struct {
	mock *MockhouseService
}

// NewMockhouseService creates a new mock instance.
func NewMockhouseService(ctrl *gomock.Controller) *MockhouseService {
	mock := &MockhouseService{ctrl: ctrl}
	mock.recorder = &MockhouseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhouseService) EXPECT() *MockhouseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockhouseService) Create(ctx context.Context, param dto.CreateHouseParam) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockhouseServiceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockhouseService)(nil).Create), ctx, param)
}

// GetByID mocks base method.
func (m *MockhouseService) GetByID(ctx context.Context, id uint) (domain.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockhouseServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockhouseService)(nil).GetByID), ctx, id)
}

// Subscribe mocks base method.
func (m *MockhouseService) Subscribe(ctx context.Context, id int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockhouseServiceMockRecorder) Subscribe(ctx, id, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockhouseService)(nil).Subscribe), ctx, id, email)
}
