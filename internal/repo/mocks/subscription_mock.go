// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/mocks/subscription.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repo/mocks/subscription.go -destination=./internal/repo/mocks/subscription_mock.go -package=mock_repo
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	domain "github.com/khostya/backend-bootcamp-assignment-2024/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MocksubscriptionRepo is a mock of subscriptionRepo interface.
type MocksubscriptionRepo struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriptionRepoMockRecorder
}

// MocksubscriptionRepoMockRecorder is the mock recorder for MocksubscriptionRepo.
type MocksubscriptionRepoMockRecorder struct {
	mock *MocksubscriptionRepo
}

// NewMocksubscriptionRepo creates a new mock instance.
func NewMocksubscriptionRepo(ctrl *gomock.Controller) *MocksubscriptionRepo {
	mock := &MocksubscriptionRepo{ctrl: ctrl}
	mock.recorder = &MocksubscriptionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubscriptionRepo) EXPECT() *MocksubscriptionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocksubscriptionRepo) Create(ctx context.Context, subscription domain.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MocksubscriptionRepoMockRecorder) Create(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksubscriptionRepo)(nil).Create), ctx, subscription)
}

// GetByHouseID mocks base method.
func (m *MocksubscriptionRepo) GetByHouseID(ctx context.Context, houseID uint) ([]domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHouseID", ctx, houseID)
	ret0, _ := ret[0].([]domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHouseID indicates an expected call of GetByHouseID.
func (mr *MocksubscriptionRepoMockRecorder) GetByHouseID(ctx, houseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHouseID", reflect.TypeOf((*MocksubscriptionRepo)(nil).GetByHouseID), ctx, houseID)
}
