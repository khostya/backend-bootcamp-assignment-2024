// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repo/mocks/flat.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repo/mocks/flat.go -destination=./internal/repo/mocks/flat_mock.go -package=mock_repo
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	domain "github.com/khostya/backend-bootcamp-assignment-2024/internal/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockflatRepo is a mock of flatRepo interface.
type MockflatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockflatRepoMockRecorder
}

// MockflatRepoMockRecorder is the mock recorder for MockflatRepo.
type MockflatRepoMockRecorder struct {
	mock *MockflatRepo
}

// NewMockflatRepo creates a new mock instance.
func NewMockflatRepo(ctrl *gomock.Controller) *MockflatRepo {
	mock := &MockflatRepo{ctrl: ctrl}
	mock.recorder = &MockflatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflatRepo) EXPECT() *MockflatRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockflatRepo) Create(ctx context.Context, flat domain.Flat) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, flat)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockflatRepoMockRecorder) Create(ctx, flat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockflatRepo)(nil).Create), ctx, flat)
}

// GetByID mocks base method.
func (m *MockflatRepo) GetByID(ctx context.Context, id uint) (domain.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockflatRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockflatRepo)(nil).GetByID), ctx, id)
}

// SetModeratorID mocks base method.
func (m *MockflatRepo) SetModeratorID(ctx context.Context, id uint, moderatorID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModeratorID", ctx, id, moderatorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModeratorID indicates an expected call of SetModeratorID.
func (mr *MockflatRepoMockRecorder) SetModeratorID(ctx, id, moderatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModeratorID", reflect.TypeOf((*MockflatRepo)(nil).SetModeratorID), ctx, id, moderatorID)
}

// UpdateStatus mocks base method.
func (m *MockflatRepo) UpdateStatus(ctx context.Context, id uint, status domain.FlatStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockflatRepoMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockflatRepo)(nil).UpdateStatus), ctx, id, status)
}
