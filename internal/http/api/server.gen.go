//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Status.
const (
	Approved     Status = "approved"
	Created      Status = "created"
	Declined     Status = "declined"
	OnModeration Status = "on moderation"
)

// Defines values for UserType.
const (
	Client    UserType = "client"
	Moderator UserType = "moderator"
)

// Address Адрес дома
type Address = string

// Date Дата + время
type Date = time.Time

// Developer Застройщик
type Developer = string

// Email Email пользователя
type Email = openapi_types.Email

// Flat Квартира
type Flat struct {
	// HouseId Идентификатор дома
	HouseId HouseId `json:"house_id"`

	// Id Идентификатор квартиры
	Id FlatId `json:"id"`

	// Price Цена квартиры в у.е.
	Price Price `json:"price"`

	// Rooms Количество комнат в квартире
	Rooms Rooms `json:"rooms"`

	// Status Статус квартиры
	Status Status `json:"status"`
}

// FlatId Идентификатор квартиры
type FlatId = int

// House Дом
type House struct {
	// Address Адрес дома
	Address Address `json:"address"`

	// CreatedAt Дата + время
	CreatedAt *Date `json:"created_at,omitempty"`

	// Developer Застройщик
	Developer *Developer `json:"developer"`

	// Id Идентификатор дома
	Id HouseId `json:"id"`

	// UpdateAt Дата + время
	UpdateAt *Date `json:"update_at,omitempty"`

	// Year Год постройки дома
	Year Year `json:"year"`
}

// HouseId Идентификатор дома
type HouseId = int

// Password Пароль пользователя
type Password = string

// Price Цена квартиры в у.е.
type Price = int

// Rooms Количество комнат в квартире
type Rooms = int

// Status Статус квартиры
type Status string

// Token Авторизационный токен
type Token = string

// UserId Идентификатор пользователя
type UserId = openapi_types.UUID

// UserType Тип пользователя
type UserType string

// Year Год постройки дома
type Year = int

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// GetDummyLoginParams defines parameters for GetDummyLogin.
type GetDummyLoginParams struct {
	UserType UserType `form:"user_type" json:"user_type"`
}

// PostFlatCreateJSONBody defines parameters for PostFlatCreate.
type PostFlatCreateJSONBody struct {
	// HouseId Идентификатор дома
	HouseId HouseId `json:"house_id"`

	// Price Цена квартиры в у.е.
	Price Price `json:"price"`

	// Rooms Количество комнат в квартире
	Rooms Rooms `json:"rooms"`
}

// PostFlatUpdateJSONBody defines parameters for PostFlatUpdate.
type PostFlatUpdateJSONBody struct {
	// Id Идентификатор квартиры
	Id FlatId `json:"id"`

	// Status Статус квартиры
	Status Status `json:"status"`
}

// PostHouseCreateJSONBody defines parameters for PostHouseCreate.
type PostHouseCreateJSONBody struct {
	// Address Адрес дома
	Address Address `json:"address"`

	// Developer Застройщик
	Developer *Developer `json:"developer"`

	// Year Год постройки дома
	Year Year `json:"year"`
}

// PostHouseIdSubscribeJSONBody defines parameters for PostHouseIdSubscribe.
type PostHouseIdSubscribeJSONBody struct {
	// Email Email пользователя
	Email Email `json:"email"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id UserId `json:"id"`

	// Password Пароль пользователя
	Password Password `json:"password"`
}

// PostRegisterJSONBody defines parameters for PostRegister.
type PostRegisterJSONBody struct {
	// Email Email пользователя
	Email *Email `json:"email,omitempty"`

	// Password Пароль пользователя
	Password Password `json:"password"`

	// UserType Тип пользователя
	UserType UserType `json:"user_type"`
}

// PostFlatCreateJSONRequestBody defines body for PostFlatCreate for application/json ContentType.
type PostFlatCreateJSONRequestBody PostFlatCreateJSONBody

// PostFlatUpdateJSONRequestBody defines body for PostFlatUpdate for application/json ContentType.
type PostFlatUpdateJSONRequestBody PostFlatUpdateJSONBody

// PostHouseCreateJSONRequestBody defines body for PostHouseCreate for application/json ContentType.
type PostHouseCreateJSONRequestBody PostHouseCreateJSONBody

// PostHouseIdSubscribeJSONRequestBody defines body for PostHouseIdSubscribe for application/json ContentType.
type PostHouseIdSubscribeJSONRequestBody PostHouseIdSubscribeJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody PostRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dummyLogin)
	GetDummyLogin(w http.ResponseWriter, r *http.Request, params GetDummyLoginParams)

	// (POST /flat/create)
	PostFlatCreate(w http.ResponseWriter, r *http.Request)

	// (POST /flat/update)
	PostFlatUpdate(w http.ResponseWriter, r *http.Request)

	// (POST /house/create)
	PostHouseCreate(w http.ResponseWriter, r *http.Request)

	// (GET /house/{id})
	GetHouseId(w http.ResponseWriter, r *http.Request, id HouseId)

	// (POST /house/{id}/subscribe)
	PostHouseIdSubscribe(w http.ResponseWriter, r *http.Request, id HouseId)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDummyLogin operation middleware
func (siw *ServerInterfaceWrapper) GetDummyLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDummyLoginParams

	// ------------- Required query parameter "user_type" -------------

	if paramValue := r.URL.Query().Get("user_type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_type", r.URL.Query(), &params.UserType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDummyLogin(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFlatCreate operation middleware
func (siw *ServerInterfaceWrapper) PostFlatCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFlatCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostFlatUpdate operation middleware
func (siw *ServerInterfaceWrapper) PostFlatUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostFlatUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostHouseCreate operation middleware
func (siw *ServerInterfaceWrapper) PostHouseCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHouseCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHouseId operation middleware
func (siw *ServerInterfaceWrapper) GetHouseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id HouseId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHouseId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostHouseIdSubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostHouseIdSubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id HouseId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostHouseIdSubscribe(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/dummyLogin", wrapper.GetDummyLogin)
	m.HandleFunc("POST "+options.BaseURL+"/flat/create", wrapper.PostFlatCreate)
	m.HandleFunc("POST "+options.BaseURL+"/flat/update", wrapper.PostFlatUpdate)
	m.HandleFunc("POST "+options.BaseURL+"/house/create", wrapper.PostHouseCreate)
	m.HandleFunc("GET "+options.BaseURL+"/house/{id}", wrapper.GetHouseId)
	m.HandleFunc("POST "+options.BaseURL+"/house/{id}/subscribe", wrapper.PostHouseIdSubscribe)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.PostLogin)
	m.HandleFunc("POST "+options.BaseURL+"/register", wrapper.PostRegister)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
